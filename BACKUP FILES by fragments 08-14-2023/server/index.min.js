const express=require("express"),app=express(),mysql=require("mysql"),cors=require("cors"),bcrypt=require("bcrypt");app.use(cors()),app.use(express.json());const db=mysql.createConnection({user:"root",host:"localhost",password:"",database:"academy"});app.get("/fetchUser",(req,res)=>{db.query("SELECT * FROM userstbl",(err,result)=>{err?console.log(err):res.send(result)})}),app.get("/fetchCourse",(req,res)=>{db.query("SELECT * FROM course_tbl",(err,result)=>{err?console.log(err):res.send(result)})}),app.get("/fetchQuiz/:moduleId",(req,res)=>{const moduleId=req.params.moduleId,query="SELECT * FROM module_exam_tbl WHERE moduleId = ?";db.query(query,[moduleId],(err,result)=>{err?console.log(err):res.send(result)})}),app.get("/fetchModuleContent/:id",(req,res)=>{const{id:id}=req.params;db.query(`SELECT * FROM module_content_tbl WHERE moduleId = ${id}`,(err,result)=>{err?(console.log(err),res.status(500).send("An error occurred")):res.send(result)})}),app.get("/fetchSingleModule/:id",(req,res)=>{const{id:id}=req.params;db.query(`SELECT * FROM module_tbl WHERE id = ${id}`,(err,result)=>{err?(console.log(err),res.status(500).send("An error occurred")):res.send(result)})}),app.get("/fetchBookmark/:id",(req,res)=>{const{id:id}=req.params;db.query(`SELECT * FROM bookmark_tbl where user_id =${id}`,(err,result)=>{err?console.log(err):res.send(result)})}),app.get("/fetchModule/:id",(req,res)=>{const{id:id}=req.params;db.query(`SELECT * FROM module_tbl WHERE course_id = ${id}`,(err,result)=>{err?(console.log(err),res.status(500).send("An error occurred")):db.query(`SELECT * FROM module_content_tbl WHERE moduleID = ${id}`,(err,innerResult)=>{err?(console.log(err),res.status(500).send("An error occurred")):res.send({modules:result,moduleContent:innerResult})})})}),app.get("/user/:id",(req,res)=>{const{id:id}=req.params;db.query(`SELECT * FROM usertbl WHERE Id = ${id}`,(err,result)=>{err?(console.log(err),res.status(500).send("An error occurred")):res.send(result)})}),app.get("/singleCourse/:id",(req,res)=>{const{id:id}=req.params;db.query(`SELECT * FROM course_tbl\n              JOIN module_tbl ON module_tbl.course_id = course_tbl.id\n              WHERE course_tbl.id = ${id}`,(err,result)=>{err?(console.log(err),res.status(500).json({error:"An error occurred"})):db.query(`SELECT * FROM usertbl WHERE Id = ${id}`,(err,innerResult)=>{err?(console.log(err),res.status(500).send("An error occurred")):res.send({modules:result,moduleContent:innerResult})})})}),app.get("/content/:id",(req,res)=>{const{id:id}=req.params;db.query(`SELECT * FROM module_content_tbl \n      JOIN module_tbl ON module_tbl.id = module_content_tbl.moduleId \n      WHERE moduleId = ${id}`,(err,result)=>{if(err)return console.log(err),res.status(500).send("An error occurred");db.query(`SELECT * FROM course_tbl WHERE Id = ${id}`,(err,innerResult)=>{if(err)return console.log(err),res.status(500).send("An error occurred");res.send({moduleContent:result,courseData:innerResult})})})}),app.get("/bookmark/:id",(req,res)=>{const{id:id}=req.params;db.query(`SELECT * FROM bookmark_tbl WHERE id = ${id}`,(err,result)=>{err?console.log(err):res.send(result)})}),app.get("/savedCourses/:id",(req,res)=>{const{id:id}=req.params;db.query("SELECT * FROM bookmark_tbl WHERE user_id = ?",[id],(err,bookmarkResult)=>{if(err)return console.error(err),res.status(500).json({error:"Error fetching saved courses."});const savedCourseIds=bookmarkResult.map(row=>row.course_id);if(0===savedCourseIds.length)return res.send([]);const queryString="SELECT * FROM course_tbl WHERE id IN (?)";db.query(queryString,[savedCourseIds],(err,courseResult)=>{if(err)return console.error(err),res.status(500).json({error:"Error fetching course details."});const combinedResult=bookmarkResult.map(bookmarkRow=>{const matchingCourse=courseResult.find(courseRow=>courseRow.id===bookmarkRow.course_id);return{...bookmarkRow,course_details:matchingCourse}});res.send(combinedResult)})})}),app.post("/login",(req,res)=>{const email=req.body.email,password=req.body.password;db.query("SELECT * FROM usertbl WHERE Email = ?;",email,(err,result)=>{err?res.status(500).send({message:"An error occurred during login"}):result&&result.length>0?bcrypt.compare(password,result[0].Password,(error,response)=>{response?res.send(result):res.send({message:"Wrong email/password combination!"})}):res.send({message:"User doesn't exist"})})}),app.post("/Addquiz",(req,res)=>{const{id:id,examContent:examContent}=req.body;db.query("INSERT INTO module_exam_tbl (moduleID, examContent) VALUES (?, ?)",[id,examContent],(err,result)=>{err?(console.log(err),res.status(500).send("Error inserting quiz data.")):(console.log("Quiz data inserted successfully."),res.status(200).send("Quiz data inserted successfully."))})}),app.post("/insert",(req,res)=>{const Name=req.body.Name,Codename=req.body.Usercodename,Teamname=req.body.Userteamname,Interest=req.body.Userinterest,Email=req.body.Useremail,Password=req.body.Userpassword,Status=req.body.Userstatus,Role=req.body.Userrole;db.query("INSERT INTO usertbl (Name, Codename, Teamname, Email, Password, Interest, Status, Role) VALUES (?,?,?,?,?,?,?,?)",[Name,Codename,Teamname,Email,Password,Interest,Status,Role],(err,result)=>{err?console.log(err):res.send(result)})}),app.post("/bookmark",(req,res)=>{const{course_id:course_id,user_id:user_id}=req.body;db.query("INSERT INTO bookmark_tbl (course_id, user_id) VALUES (?, ?)",[course_id,user_id],(err,result)=>{err?console.log(err):res.send(result)})}),app.put("/updateUser/:id",(req,res)=>{const{id:id}=req.params,updatedRow=req.body;db.query("UPDATE users SET name = ?, email = ?, profile_image_url = ?, cover_photo_url = ?, about_me = ? WHERE Id = ?",[updatedRow.name,updatedRow.email,updatedRow.profile_image_url,updatedRow.cover_photo_url,updatedRow.about_me,id],(err,result)=>{err?(console.log(err),res.status(500).json({error:"An error occurred"})):res.send("User updated")})}),app.delete("/deleteCourse/:id",(req,res)=>{const courseId=req.params.id;db.query(`DELETE FROM bookmark_tbl WHERE course_id = ${courseId}`,(err,result)=>err?(console.error(err),res.status(500).json({error:"Error deleting course from the database."})):result.affectedRows>0?void 0:res.status(404).json({error:"Course not found."}))}),app.delete("/deleteUser/:id",(req,res)=>{const{id:id}=req.params;db.query(`DELETE FROM usertbl WHERE Id = ${id}`,(err,result)=>{err?(console.log(err),res.status(500).json({error:"An error occurred"})):res.send(result)})}),app.listen(8e3,()=>{console.log("running on port 8000")});